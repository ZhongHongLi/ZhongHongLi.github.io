(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{220:function(t,v,_){t.exports=_.p+"assets/img/work.f1309842.png"},221:function(t,v,_){t.exports=_.p+"assets/img/flow.5cb7079f.png"},222:function(t,v,_){t.exports=_.p+"assets/img/histroy.89fe8d6d.png"},223:function(t,v,_){t.exports=_.p+"assets/img/pretures.2ff230dc.png"},224:function(t,v,_){t.exports=_.p+"assets/img/devlop.a7068784.png"},225:function(t,v,_){t.exports=_.p+"assets/img/saveweihu.c80086ef.png"},226:function(t,v,_){t.exports=_.p+"assets/img/gitlab.f364cbe8.png"},266:function(t,v,_){"use strict";_.r(v);var e=_(4),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"git的三个作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的三个作用域"}},[t._v("#")]),t._v(" git的三个作用域")]),t._v(" "),e("p",[t._v("pwd 现有目录的当前路径")]),t._v(" "),e("p",[e("code",[t._v("$ git config --local local")]),t._v("  只对某个仓库有效")]),t._v(" "),e("p",[e("code",[t._v("$ git config --global global")]),t._v(" 对当前用户的所有仓库有效")]),t._v(" "),e("p",[e("code",[t._v("$ git config --system system")]),t._v(" 对系统所用登录有效")]),t._v(" "),e("p",[t._v("显示配置config的配置，加 --list\n"),e("code",[t._v("$ git config --list --local")])]),t._v(" "),e("p",[e("code",[t._v("$ git config --list --global")])]),t._v(" "),e("p",[e("code",[t._v("$ git config --list --system")])]),t._v(" "),e("p",[e("code",[t._v("$ git config --global --list")]),t._v(" 查看用户名跟邮箱")]),t._v(" "),e("p",[t._v("建git仓库\n两种场景\n1.把已有的项目代码纳入git管理\n$ cd项目代码所在的文件夹\n$ git init")]),t._v(" "),e("p",[t._v("2.新建的项目直接用git管理\n$ cd 某个文件夹")]),t._v(" "),e("p",[e("code",[t._v("$ git init your_project")]),t._v(" # 会在当前路径下创建项目名称同名的文件夹")]),t._v(" "),e("p",[e("code",[t._v("$ cd your_project")])]),t._v(" "),e("h3",{attrs:{id:"git工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git工作流"}},[t._v("#")]),t._v(" git工作流")]),t._v(" "),e("p",[e("code",[t._v("安装就不将了")]),t._v(" 我用的是 "),e("strong",[t._v("git  TortoiseGit")])]),t._v(" "),e("h3",{attrs:{id:"集中式的工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集中式的工作流"}},[t._v("#")]),t._v(" 集中式的工作流")]),t._v(" "),e("p",[e("code",[t._v("就是在master")]),t._v(" 上直接开发,直接"),e("code",[t._v("git clone --地址")]),t._v("  在各自的模块开发先提交后推送，后面小伙伴更新一下在提交推送要不然提交不成功  "),e("code",[t._v("适合3-5人开发")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.funtl.com/assets/git-workflow-svn.png",alt:"图例"}})]),t._v(" "),e("h3",{attrs:{id:"功能式开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能式开发"}},[t._v("#")]),t._v(" 功能式开发")]),t._v(" "),e("p",[e("img",{attrs:{src:_(220),alt:"An image"}})]),t._v(" "),e("p",[t._v("在自己本地创建一个新的分支"),e("code",[t._v("Feature_login")]),t._v(" 在功能上开发开发完了提交然后项目组长合并，自己在本地"),e("code",[t._v("master")]),t._v("删除分支就好了。后期自己更新下代码")]),t._v(" "),e("h3",{attrs:{id:"git-flow-工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-工作流"}},[t._v("#")]),t._v(" git Flow 工作流")]),t._v(" "),e("p",[e("img",{attrs:{src:_(221),alt:"An image"}})]),t._v(" "),e("ul",[e("li",[e("p",[t._v("GitFlow 工作流定义了一个围绕项目发布的严格分支模型，虽然比功能分支工作流复杂积分，但提供了\n用于一个健壮的用户管理大型项目的框架")])]),t._v(" "),e("li",[e("p",[t._v("GitFlow工作流没有超过功能分支工作流的概念和命令，而是为不同分支分配一个很明确的角色，并定义分支之间如何什么时\n候进行交互，除了使用功能分支，在做准备，维护和记录发布也使用各自的分支，当然你可以用上功能分支工作流好处："),e("code",[t._v("pull Requests")]),t._v(",隔离实验性开发和更高效的写作")]),t._v(" "),e("h3",{attrs:{id:"工作方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作方式"}},[t._v("#")]),t._v(" 工作方式")])]),t._v(" "),e("li",[e("p",[t._v("Gitflow 工作流任然用中央仓库作为所有开发者的交互中心，和其他的工作流一样，开发者在本地并push分支到中央仓库中")]),t._v(" "),e("h3",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),e("p",[t._v("相对使用权有一个master分支，Gitflow工作流使用2个分支记录项目的历史"),e("code",[t._v("master")]),t._v("分支存储了正式发布的历史，而devlop分支作为功能的集成分支")]),t._v(" "),e("p",[e("img",{attrs:{src:_(222),alt:"An image"}})]),t._v(" "),e("p",[t._v("剩下要说明问题围绕着2个分支的区别展开")]),t._v(" "),e("h3",{attrs:{id:"功能分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能分支"}},[t._v("#")]),t._v(" 功能分支")]),t._v(" "),e("p",[t._v("每个新功能位于一个自己的分支，这样可以"),e("code",[t._v("push")]),t._v("到中央仓库以备份和写作，但功能分支不是从"),e("code",[t._v("master")]),t._v("分支上拉出新分支，而是使用devlop分支作为父分支，当新功能完成时，合并回"),e("code",[t._v("devlop")]),t._v("分支。新功能提交应该从不直接与"),e("code",[t._v("master")]),t._v("分支交互")]),t._v(" "),e("p",[e("img",{attrs:{src:_(223),alt:"An image"}})]),t._v(" "),e("p",[e("strong",[t._v("注意")]),t._v("从各种含义和目的上来看，功能分支加上"),e("code",[t._v("devlop")]),t._v("分支就是工作流的用法，但"),e("code",[t._v("GitFlow")]),t._v("工作流没有再这里止步")]),t._v(" "),e("h3",{attrs:{id:"发布分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布分支"}},[t._v("#")]),t._v(" 发布分支")]),t._v(" "),e("p",[e("img",{attrs:{src:_(224),alt:"An image"}})]),t._v(" "),e("p",[t._v("一旦"),e("code",[t._v("devlop")]),t._v("分支上有了做一次发布(或者说快到了既定的发布日)的足够功能，就从"),e("code",[t._v("devlop")]),t._v("分支上"),e("code",[t._v("fork")]),t._v("一个发布分支，新建的分支用户开始发布循坏，索易这个时间开始之后新的功能能不能再加到这个分支--这个分支只应该做\n"),e("code",[t._v("bug")]),t._v("修复,翁当生成和其他面向发布任务，一旦对外发布的工作都完成了，发布分支就合并到"),e("code",[t._v("master")]),t._v("分支并合并一个版本号打好"),e("code",[t._v("Tag")]),t._v(",另外，这些从新建分布分支以来的做的修改要合并"),e("code",[t._v("devlop")]),t._v("分支")]),t._v(" "),e("p",[t._v("使用一个用户发布准备的专门分支，使用一个团队可以在完善当前的发布版本的同事，另一个团队可以继续开发下个版本的功能，这也打造一定良好的开发阶段(比如，可以很轻松地说)")]),t._v(" "),e("ul",[e("li",[t._v("常用的分支约定：")]),t._v(" "),e("li",[t._v("用户新建发布分支的分支:"),e("code",[t._v("devlop")])]),t._v(" "),e("li",[t._v("用户合并的分支："),e("code",[t._v("master")])]),t._v(" "),e("li",[t._v("分支命名：release- 或release/")])]),t._v(" "),e("h3",{attrs:{id:"维护分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护分支"}},[t._v("#")]),t._v(" 维护分支")]),t._v(" "),e("p",[e("img",{attrs:{src:_(225),alt:"An image"}})]),t._v(" "),e("p",[t._v("维护分支或硕士热修复"),e("code",[t._v("(hotfix)")]),t._v("分支用户生成快速给产品发布版本(production releases)打补丁，这是唯一可以从"),e("code",[t._v("master")]),t._v("分支fork出来的分支，修复完成，修改应该马上合并回"),e("code",[t._v("master")]),t._v("分支和"),e("code",[t._v("devlop")]),t._v("分支(当前的发布分支)，"),e("code",[t._v("master")]),t._v("分支应该用新的版本号搭好Tag")]),t._v(" "),e("p",[t._v("为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其他工作是等待下一个发布循坏，你可以把维护分支想成是一个直接在"),e("code",[t._v("master")]),t._v("分支上处理的临时发布")]),t._v(" "),e("p",[e("strong",[t._v("常用的也就是集中工作流 还有一个就是git FLow工作流")])])])]),t._v(" "),e("h3",{attrs:{id:"gitlab·gitflow工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab·gitflow工作流"}},[t._v("#")]),t._v(" Gitlab·Gitflow工作流")]),t._v(" "),e("ul",[e("li",[t._v("基本流程")])]),t._v(" "),e("p",[e("img",{attrs:{src:_(226),alt:"An image"}})]),t._v(" "),e("p",[t._v("1.项目组长创建仓库"),e("code",[t._v("git flow init")]),t._v("\n2.成员进行clone "),e("code",[t._v("git clone")]),t._v("\n3.项目组长分配里程碑与议题（任务）\n4.项目成员根据自己被分配到的任务建立对象的分支"),e("code",[t._v("git flow feature satrt xxx")])]),t._v(" "),e("ul",[e("li",[t._v("先在项目中建立分支，再拉取开发")]),t._v(" "),e("li",[t._v("先在贝蒂建立分支，在提交\n5.完成任务后pull request "),e("code",[t._v("git push origin")]),t._v("\n6.pull request删除分支，关闭对应的议题任务"),e("code",[t._v("git flow feature finish xxx")])])]),t._v(" "),e("h3",{attrs:{id:"所需要的工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#所需要的工具"}},[t._v("#")]),t._v(" 所需要的工具")]),t._v(" "),e("ul",[e("li",[t._v("git命令行")]),t._v(" "),e("li",[t._v("git flow命令行or插件（可选项，省去git组合命令) "),e("code",[t._v("git flow init")]),t._v("="),e("code",[t._v("git checkout -b develop")])]),t._v(" "),e("li",[t._v("查看"),e("code",[t._v("git branch")]),t._v("分支")]),t._v(" "),e("li",[t._v("git-flow-test readme file 创建readme.md")])])])}),[],!1,null,null,null);v.default=s.exports}}]);